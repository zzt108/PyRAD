#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.9.6 on Thu Jul  2 15:30:00 2020
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import openpyxl
# end wxGlade


class csFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: csFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((760, 460))
        self.nb = wx.Notebook(self, wx.ID_ANY)
        self.nb1 = wx.Panel(self.nb, wx.ID_ANY)
        self.lb_system = wx.ListBox(self.nb1, wx.ID_ANY, choices=["choice 1"], style=wx.LB_HSCROLL | wx.LB_SINGLE | wx.LB_SORT)
        self.wb=openpyxl.load_workbook("CSF-Audit.xlsx")
        self.lb_system.Clear() 
        self.lb_system.Append(self.wb.sheetnames)
        self.lb_system.SetSelection(0)
        self.tc_sysinfo = wx.TextCtrl(self.nb1, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.b_add = wx.Button(self.nb1, wx.ID_ANY, "Add")
        self.b_del = wx.Button(self.nb1, wx.ID_ANY, "Delete")
        self.b_open = wx.Button(self.nb1, wx.ID_ANY, "Open")
        self.b_store = wx.Button(self.nb1, wx.ID_ANY, "Store")
        self.tc_system = wx.TextCtrl(self.nb1, wx.ID_ANY, "")
        self.nb2 = wx.Panel(self.nb, wx.ID_ANY)
        self.tree = wx.TreeCtrl(self.nb2, wx.ID_ANY)
        self.root=self.tree.AddRoot("CSF")
        self.tc_evidence = wx.TextCtrl(self.nb2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_short = wx.TextCtrl(self.nb2, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.ch_rating = wx.Choice(self.nb2, wx.ID_ANY, choices=["High", "Medium", "Low", "Compliant", "Unknown"])
        self.b_save = wx.Button(self.nb2, wx.ID_ANY, "Save")
        self.tc_assessment = wx.TextCtrl(self.nb2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.on_list_change, self.lb_system)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.on_open_pressed, self.lb_system)
        self.Bind(wx.EVT_BUTTON, self.on_add_pressed, self.b_add)
        self.Bind(wx.EVT_BUTTON, self.on_del_pressed, self.b_del)
        self.Bind(wx.EVT_BUTTON, self.on_open_pressed, self.b_open)
        self.Bind(wx.EVT_BUTTON, self.on_store_pressed, self.b_store)
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.on_tree_selection, self.tree)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: csFrame.__set_properties
        self.SetTitle("Cybersecurity Framework Auditor")
        self.lb_system.SetMinSize((200, 300))
        self.tc_sysinfo.SetMinSize((400, 200))
        self.b_add.SetMinSize((60, 20))
        self.b_del.SetMinSize((60, 20))
        self.b_open.SetMinSize((60, 20))
        self.b_store.SetMinSize((60, 20))
        self.tc_system.SetMinSize((120, 20))
        self.tree.SetMinSize((600, 200))
        self.tc_evidence.SetMinSize((300, 150))
        self.ch_rating.SetSelection(4)
        self.tc_assessment.SetMinSize((300, 150))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: csFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self.nb1, wx.ID_ANY, "Systems under audit")
        sizer_2.Add(label_1, 0, wx.ALL, 4)
        sizer_3.Add(self.lb_system, 0, wx.ALL, 4)
        sizer_3.Add((20, 20), 0, 0, 0)
        sizer_4.Add(self.tc_sysinfo, 0, 0, 0)
        sizer_5.Add(self.b_add, 0, wx.ALL, 4)
        sizer_5.Add(self.b_del, 0, wx.ALL, 4)
        sizer_5.Add(self.b_open, 0, wx.ALL, 4)
        sizer_5.Add(self.b_store, 0, wx.ALL, 4)
        sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
        label_3 = wx.StaticText(self.nb1, wx.ID_ANY, "System Name")
        label_3.SetMinSize((60, 35))
        sizer_6.Add(label_3, 0, wx.ALL, 4)
        sizer_6.Add(self.tc_system, 0, wx.ALL, 4)
        sizer_4.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)
        static_line_1 = wx.StaticLine(self.nb1, wx.ID_ANY)
        sizer_2.Add(static_line_1, 0, wx.ALL | wx.EXPAND, 4)
        label_2 = wx.StaticText(self.nb1, wx.ID_ANY, "Select a system and press Open or double click, go to the Audit page to work on it.  Press \"Delete\" to remove the selected system. Press \"Add\" to create a new system to audit.  To save changes back to disk, press \"Store\"", style=wx.ALIGN_LEFT)
        label_2.SetMinSize((600, 32))
        sizer_2.Add(label_2, 0, wx.ALL, 4)
        self.nb1.SetSizer(sizer_2)
        sizer_7.Add(self.tree, 0, wx.ALL | wx.EXPAND, 1)
        label_4 = wx.StaticText(self.nb2, wx.ID_ANY, "Evidence")
        sizer_9.Add(label_4, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
        sizer_9.Add(self.tc_evidence, 0, wx.ALL, 4)
        sizer_8.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_11.Add(self.tc_short, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
        sizer_11.Add(self.ch_rating, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
        sizer_11.Add((20, 70), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11.Add(self.b_save, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
        sizer_8.Add(sizer_11, 0, wx.EXPAND, 0)
        label_5 = wx.StaticText(self.nb2, wx.ID_ANY, "Assessment")
        sizer_10.Add(label_5, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
        sizer_10.Add(self.tc_assessment, 0, wx.ALL, 4)
        sizer_8.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 0, wx.EXPAND, 0)
        self.nb2.SetSizer(sizer_7)
        self.nb.AddPage(self.nb1, "Main")
        self.nb.AddPage(self.nb2, "Audit")
        sizer_1.Add(self.nb, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        self.display_info()

    def wsRead(self, name):
        self.tree.DeleteChildren(self.root)
        group = ""
        category = ""
        self.ws = self.wb[name]
        i = 4
        while True:
            cell1 = "B"+str(i)
            cell2 = "D"+str(i)
            cell3 = "G"+str(i)
            if self.ws[cell1].value == "END": 
                break
            if self.ws[cell1].value != group:
                grpid = self.tree.AppendItem(self.root, self.ws[cell1].value)
                group = self.ws[cell1].value
                category = ""
            if self.ws[cell2].value != category:
                catid = self.tree.AppendItem(grpid, self.ws[cell2].value)
                category = self.ws[cell2].value
            self.tree.AppendItem(catid, self.ws[cell3].value,data=(i))
            i = i+1
        idx = self.lb_system.FindString(name)
        self.lb_system.SetSelection(idx)
        self.nb.SetPageText(1,name)        
        return

    def wsRemove(self, name):
        self.ws = self.wb[name]
        self.wb.remove(self.ws)
        self.wb.save("CSF-Audit.xlsx")
        return
 
    def wsWrite(self):
        self.ws["E2"] = self.tc_sysinfo.GetValue()
        self.wb.save("CSF-Audit.xlsx")  
        return

    def display_info(self):
        listno = self.lb_system.GetSelection()
        listname = self.lb_system.GetString(listno)
        self.ws = self.wb[listname]
        self.tc_sysinfo.SetValue(self.ws['E2'].value)
        return

    def on_list_change(self, event):  # wxGlade: csFrame.<event_handler>
        self.display_info()
        event.Skip()

    def on_add_pressed(self, event):  # wxGlade: csFrame.<event_handler>
        sysname = self.tc_system.GetValue()
        if len(sysname)==0:
            wx.MessageBox("Please enter a system name","Error",wx.OK)
        elif self.lb_system.FindString(sysname) != wx.NOT_FOUND:
            wx.MessageBox("System already under audit","Error",wx.OK) 
        else:
            self.lb_system.Append(sysname)
            self.tc_system.SetValue("")
            source = self.wb['Template']
            self.ws = self.wb.copy_worksheet(source)
            self.ws.title = sysname
            self.wb.save("CSF-Audit.xlsx")
            self.wsRead(sysname)       
        event.Skip()

    def on_open_pressed(self, event):  # wxGlade: csFrame.<event_handler>
        listno = self.lb_system.GetSelection()
        listname = self.lb_system.GetString(listno)
        self.wsRead(listname)
        event.Skip()

    def on_del_pressed(self, event):  # wxGlade: csFrame.<event_handler>
        listno = self.lb_system.GetSelection()
        listname = self.lb_system.GetString(listno)
        if listname == "Template":
            wx.MessageBox("You cannot delete the Template","Error",wx.OK)
        else:
            dlg = wx.MessageDialog(None,"Do you want to delete "+listname+"?",\
                "Confirm",wx.YES_NO)
            if dlg.ShowModal() == wx.ID_YES:
                self.lb_system.Delete(listno)
                dlg = wx.MessageDialog(None,"Do you want to remove spreadsheet data?",\
                    "Confirm",wx.YES_NO)
                if dlg.ShowModal() == wx.ID_YES:
                    self.wsRemove(listname)
                if self.nb.GetPageText(1) == listname:
                    listno = self.lb_system.FindString("Template")
                    self.lb_system.SetSelection(listno)
                    self.wsRead("Template")                
        event.Skip()

    def on_store_pressed(self, event):  # wxGlade: csFrame.<event_handler>
        self.wsWrite()
        event.Skip()
        
    def on_tree_selection(self, event):  # wxGlade: csFrame.<event_handler>
        print("Event handler 'on_tree_selection' not implemented!")
        event.Skip()
# end of class csFrame

class csfApp(wx.App):
    def OnInit(self):
        self.frame = csFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class csfApp

if __name__ == "__main__":
    app = csfApp(0)
    app.MainLoop()
